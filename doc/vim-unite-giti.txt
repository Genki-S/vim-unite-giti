*vim-unite-giti.txt*	

Author: kmnk <kmnknmk+vim@gmail.com>
Repository: https://github.com/kmnk/vim-unite-giti

==========================================================================
CONTENTS					*vim-unite-giti-contents*

Introduction		|vim-unite-giti-introduction|
Install			|vim-unite-giti-install|
Sources			|vim-unite-giti-sources|
Kinds			|vim-unite-giti-kinds|
Commands		|vim-unite-giti-commands|
Samples			|vim-unite-giti-samples|


==========================================================================
INTRODUCTION					*vim-unite-giti-introduction*

|vim-unite-giti| is unite source for using git.
And provide some simple commands.


==========================================================================
INSTALL						*vim-unite-giti-install*

If you use NeoBundle (or Vundle) plugin, add following line to your .vimrc.
And execute :NeoBundleInstall command.
Example: >
  NeoBundle 'git://github.com/kmnk/vim-unite-giti.git'
<

==========================================================================
SOURCES						*vim-unite-giti-sources*

This plugin provides following unite sources.

giti						*vim-unite-giti-sources-giti*

	List source names of giti.


giti/branch					*vim-unite-giti-sources-giti/branch*

	List results of "git branch".


giti/branch_all					*vim-unite-giti-sources-giti/branch_all*

	List results of "git branch -a".


giti/config					*vim-unite-giti-sources-giti/config*

	List git configs.


giti/log					*vim-unite-giti-sources-giti/log*

	List formated reuslts of "git log".


giti/status					*vim-unite-giti-sources-giti/status*

	List formated results of "git status".
	Every line has two statuses, IndexStatus and WorkStatus.
	IndexStatus is status of index, and WorkStatus is of work tree.

==========================================================================
KINDS						*vim-unite-giti-kinds*

This plugin provides following unite kinds.

giti/branch					*vim-unite-giti-kinds-giti/branch*

	run switch sw new
		Checkout selected branch, and switch it.
		Execute "git checkout" on your shell.

	delete rm
		Delete selected branch.
		And can delete remote branch too if you want.
		Execute "git branch -d"
		and "git push $REPOSITORY :$BRANCH_NAME" on your shell.

	delete_force
		Force delete selected branch.
		And can delete remote branch too if you want.
		

	merge


giti/branch/new					*vim-unite-giti-kinds-giti/branch/new*

	run create new


giti/config					*vim-unite-giti-kinds-giti/config*

	run yank_value

	write

	remove


giti/log					*vim-unite-giti-kinds-giti/log*

	view

	diff di

	revert

	vimdiff vdi

	reset_hard reset


giti/status					*vim-unite-giti-kinds-giti/status*

	add stage

	reset_head reset undo unstage

	commit ci

	amend

	checkout

	diff di

	diff_cached dic

	diff_head dih

	vimdiff_head vdih vdi

	rm_cached rmc

	ignore



==========================================================================
COMMANDS					*vim-unite-giti-commands*

This plugin provides following commands.

Giti						*vim-unite-giti-commands-giti*

GitiWithConfirm					*vim-unite-giti-commands-giti-with-confirm*

GitiFetch					*vim-unite-giti-commands-giti-fetch*

GitiPush					*vim-unite-giti-commands-giti-push*

GitiPushWithSettingUpstream			*vim-unite-giti-commands-giti-push-with-setting-upstream*

GitiPushExpressly				*vim-unite-giti-commands-giti-push-expressly*

GitiPull					*vim-unite-giti-commands-giti-pull*

GitiPullSquash					*vim-unite-giti-commands-giti-pull-squash*

GitiPullRebase					*vim-unite-giti-commands-giti-pull-rebase*

GitiPullExpressly				*vim-unite-giti-commands-giti-pull-expressly*

GitiDiff					*vim-unite-giti-commands-giti-diff*

GitiDiffCached					*vim-unite-giti-commands-giti-diff-cached*

GitiLog						*vim-unite-giti-commands-giti-log*

GitiLogLine					*vim-unite-giti-commands-giti-log-line*


==========================================================================
SAMPLES						*vim-unite-giti-samples*



==========================================================================
vim:tw=78:ts=8:ft=help:norl:noet:fen:fdl=0:
